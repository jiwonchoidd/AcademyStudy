
#ifndef __PLAYER_OBJECT__
#define __PLAYER_OBJECT__

/*---------------------------------------------------------------

CBaseObject 를 상속받은 플레이어 객체.


---------------------------------------------------------------*/


class CPlayerObject : public CBaseObject
{
public:

	////////////////////////////////////////////////////////////////////
	// 생성자, 파괴자.
	//
	////////////////////////////////////////////////////////////////////
			CPlayerObject(int iObjectType, int iObjectID, BOOL bPlayerCharacter);
	virtual ~CPlayerObject();




	// =================================================================
	// 오브젝트 공통 인터페이스 가상함수.
	//
	// =================================================================
	////////////////////////////////////////////////////////////////////
	// 오브젝트 액션 가상함수.
	//
	// Parameters: (DWORD)Param.
	// Return: (DWORD)Value.
	////////////////////////////////////////////////////////////////////
	virtual	DWORD		Action(DWORD dwParam);

	////////////////////////////////////////////////////////////////////
	// 오브젝트 그리기 가상함수.
	//
	// Parameters: (BYTE *)DestPtr. (int)DestWidth. (int)DestHeight. (int)DestPitch.
	// Return: (DWORD)Value.
	////////////////////////////////////////////////////////////////////
	virtual	DWORD		Draw(BYTE *bypDest, int iDestWidth, int iDestHeight, int iDestPitch);


	////////////////////////////////////////////////////////////////////
	// 오브젝트 액션 변경 함수. 
	// 베이스 클래스의 m_dwActionParam 값에 따라 동작을 변경해준다.
	//
	// Parameters: 없음.
	// Return: 없음.
	////////////////////////////////////////////////////////////////////
	void				ActionProc(void);

	////////////////////////////////////////////////////////////////////
	// HP 셋팅.
	//
	// Parameters: (char)HP.
	// Return: 없음.
	////////////////////////////////////////////////////////////////////
	void				SetHP(char chHP);

	////////////////////////////////////////////////////////////////////
	// HP 얻기
	//
	// Parameters: 없음.
	// Return: (int)HP.
	////////////////////////////////////////////////////////////////////
	int					GetHP(void);



	////////////////////////////////////////////////////////////////////
	// 오브젝트 방향 셋팅.
	//
	// Parameters: (int)Direction.
	// Return: 없음.
	////////////////////////////////////////////////////////////////////
	void				SetDirection(int iDir);
	int					GetDirection(void);

	////////////////////////////////////////////////////////////////////
	// 플레이어 객체 확인.
	//
	// Parameters: 없음.
	// Return: (BOOL)TRUE, FALSE.
	////////////////////////////////////////////////////////////////////
	BOOL				IsPlayer(void);

protected:

	// =================================================================
	// 동작 상태, 스프라이트 범위를 바꿔주는 함수.
	// 본 함수들은 내부함수로, SetAction() 함수에서 호출된다.
	// =================================================================
	////////////////////////////////////////////////////////////////////
	// 각각의 동작으로 동작타입과, 스프라이트를 변경해준다.
	//
	// Parameters: 없음.
	// Return: 없음.
	////////////////////////////////////////////////////////////////////
	void				InputActionProc(void);

	void				SetActionStand(void);
	void				SetActionMove(int iAction);
	void				SetActionAttack1(void);
	void				SetActionAttack2(void);
	void				SetActionAttack3(void);



protected:


	//------------------------------------------------------------------
	// 방향 정보. 
	//------------------------------------------------------------------
	int					m_iDirCur;
	int					m_iDirOld;

	//------------------------------------------------------------------
	// 액션 정보. 
	//------------------------------------------------------------------
	DWORD				m_dwActionCur;
	DWORD				m_dwActionOld;


	//------------------------------------------------------------------
	// HP 정보.
	//------------------------------------------------------------------
	char				m_chHP;


	//------------------------------------------------------------------
	// 플레이어 캐릭터인가 아닌가.
	// 캐릭터 상태에 대한 패킷을 보낼지 말지를 결정하는데 사용된다.
	//------------------------------------------------------------------
	BOOL				m_bPlayerCharacter;


};

#endif