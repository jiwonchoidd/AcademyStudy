
/*---------------------------------------------------------------

select 모델의 서버 네트워크 관련 함수.

블럭모드의 소켓을 사용한다.

---------------------------------------------------------------*/

#ifndef __NETWORK__
#define __NETWORK__

//---------------------------------------------------------------
// 최대 접속 자.
//---------------------------------------------------------------
#define dfNETWORK_MAX_USER	63

//---------------------------------------------------------------
// 초당 최대 수신가능 패킷 수
//---------------------------------------------------------------
#define dfNETWORK_MAX_RECV_SEC		20


#define dfNETWORK_PORT		5000

//---------------------------------------------------------------
// 패킷의 가장 앞에 들어갈 패킷코드.
//---------------------------------------------------------------
#define dfNETWORK_PACKET_CODE	((BYTE)0x89)
//---------------------------------------------------------------
// 패킷의 가장 뒤에 들어갈 패킷코드.
//---------------------------------------------------------------
#define dfNETWORK_PACKET_END	((BYTE)0x79)


//---------------------------------------------------------------
// 송, 수신시 사용할 버퍼 크기
// 한번에 Recv, Send 할 수 있는 최대 크기.
//---------------------------------------------------------------
#define dfNETWORK_BUFF_SIZE		512



// **************************************************************** 
// 패킷 헤더 구조체. 
//
// 
// **************************************************************** 
struct st_NETWORK_PACKET_HEADER
{
	BYTE	byCode;			// 패킷코드 0x89 고정.
	BYTE	bySize;			// 패킷 사이즈.
	BYTE	byType;			// 패킷타입.
	BYTE	byTemp;			// 사용안함.
};

#define dfNETWORK_PACKET_HEADER_SIZE	4



// **************************************************************** 
// 세션 정보 구조체. 
// 
// **************************************************************** 
struct st_NETWORK_SESSION
{
	BOOL			bConnect;		// 접속여부.

	SOCKET			Socket;			// 현 접속의 TCP 소켓.
	DWORD			dwSessionID;	// 접속자의 고유 세션 ID.
	
	CAyaStreamSQ	clRecvQ;		// 수신 큐.
	CAyaStreamSQ	clSendQ;		// 송신 큐.

	DWORD			dwTrafficTick;	// 트래픽 체크를 위한 틱.  
	DWORD			dwTrafficCount;	// 1초마다 송신된 트래픽 수.

};




//---------------------------------------------------------------
// 네트워크 관련 전역 변수.
//---------------------------------------------------------------
extern SOCKET			g_netListenSocket;


////////////////////////////////////////////////////////////////////
// 비어있는 세션 찾기.
//
// Parameters: 없음.
// Return: (st_NETWORK_SESSION *)세션 구조체.
////////////////////////////////////////////////////////////////////
st_NETWORK_SESSION		*GetEmptySession(void);

////////////////////////////////////////////////////////////////////
// ID 로 세션 찾기.
//
// Parameters: (DWORD)SessionID.
// Return: (st_NETWORK_SESSION *)세션 구조체.
////////////////////////////////////////////////////////////////////
st_NETWORK_SESSION		*GetSession(DWORD dwSessionID);

////////////////////////////////////////////////////////////////////
// Socket 으로 세션 찾기.
//
// Parameters: (SOCKET)Socket.
// Return: (st_NETWORK_SESSION *)세션 구조체.
////////////////////////////////////////////////////////////////////
st_NETWORK_SESSION		*GetSession(SOCKET Socket);





////////////////////////////////////////////////////////////////////
// WinSock 초기화.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netStartUp(void);

////////////////////////////////////////////////////////////////////
// WinSock 정리
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netCleanUp(void);

////////////////////////////////////////////////////////////////////
// PortOpen
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netPortOpen(void);





////////////////////////////////////////////////////////////////////
// 네트워크 메인 처리.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netNetworkProc(void);



////////////////////////////////////////////////////////////////////
// 사용자 접속 이벤트 처리.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netAcceptEvent(void);

///////////////////////////////////////////////////////////////////
// 패킷 수신 이벤트 처리.
///
// Parameters: (int)SessionArrayCount.
// Return: 없음.
////////////////////////////////////////////////////////////////////
BOOL	netRecvEvent(int iSessionArrayCount);

////////////////////////////////////////////////////////////////////
// 패킷 송신 이벤트 처리.
//
// Parameters: (int)SessionArrayCount.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSendEvent(int iSessionArrayCount);


////////////////////////////////////////////////////////////////////
// 패킷 보내기.
//
// Parameters: (DWORD)SessionID. (CAyaPacket *)PacketClass.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSendPacket(DWORD dwSessionID, CAyaPacket *clpPacket);


////////////////////////////////////////////////////////////////////
// 전체 사용자에게 패킷 보내기.
//
// Parameters: (CAyaPacket *)PacketClass. (DWORD)안보낼 ID.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSendPacketAll(CAyaPacket *clpPacket, DWORD dwNoSendSessionID = 0xffffffff);



//////////////////////////////////////////////////////////////////////////
// CompleteRecvPacket
//
// 패킷이 완료되었는지 확인후 완료 되었다면 패킷을 처리한다.
//
// Parameters: (DWORD)SessionID.
// Return: (DWORD) 1:패킷처리 할것 없음. 0:패킷처리 남음. 0xff:오류.
//////////////////////////////////////////////////////////////////////////
DWORD	CompleteRecvPacket(DWORD dwSessionID);


//////////////////////////////////////////////////////////////////////////
// 패킷 타입에 따른 처리 함수 호출.
//
// Parameters: (DWORD)SessionID. (BYTE)PacketType. (CAyaPacket *)PacketClass.
// Return: (BOOL)TRUE, FALSE.
//////////////////////////////////////////////////////////////////////////
BOOL	PacketProc(DWORD dwSessionID, BYTE byPacketType, CAyaPacket *clpPacket);




////////////////////////////////////////////////////////////////////
// 사용자 접속해지 처리.
//
// Parameters: (DWORD)SessionID.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netRemoveSession(DWORD dwSessionID);







/////////////////////////////////////////////////////////////////////
// 아웃풋!
//
// Parameters: (char *)Format, ...
// Return: 없음.
/////////////////////////////////////////////////////////////////////
void	LogOutput(char *lpszFmt, ... );
#endif

