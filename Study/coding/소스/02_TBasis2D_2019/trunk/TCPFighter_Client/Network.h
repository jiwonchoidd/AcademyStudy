
/*---------------------------------------------------------------

클라이언트의 WSAAsyncSelect 모델을 사용한
네트워크 함수 모음.



---------------------------------------------------------------*/

#ifndef __NETWORK__
#define __NETWORK__


#define dfNETWORK_PORT	5000

//---------------------------------------------------------------
// 네트워크용 윈도우 메시지.
//---------------------------------------------------------------
#define	dfNETWORK_UM			WM_USER + 89

//---------------------------------------------------------------
// 패킷의 가장 앞에 들어갈 패킷코드.
//---------------------------------------------------------------
#define dfNETWORK_PACKET_CODE	((BYTE)0x89)
//---------------------------------------------------------------
// 패킷의 가장 뒤에 들어갈 패킷코드.
//---------------------------------------------------------------
#define dfNETWORK_PACKET_END	((BYTE)0x79)


//---------------------------------------------------------------
// 송, 수신시 사용할 WSABUF 의 버퍼 크기
// 한번에 Recv, Send 할 수 있는 최대 크기.
//---------------------------------------------------------------
#define dfNETWORK_WSABUFF_SIZE	512



// **************************************************************** 
// 패킷 헤더 구조체. 
//
// 
// **************************************************************** 
struct st_NETWORK_PACKET_HEADER
{
	BYTE	byCode;			// 패킷코드 0x89 고정.
	BYTE	bySize;			// 패킷 사이즈.
	BYTE	byType;			// 패킷타입.
	BYTE	byTemp;			// 사용안함.
};

#define dfNETWORK_PACKET_HEADER_SIZE	4


//---------------------------------------------------------------
// 네트워크 관련 전역 변수.
//---------------------------------------------------------------
extern SOCKET			g_netSocket;
extern CAyaStreamSQ		g_netRecvQ;
extern CAyaStreamSQ		g_netSendQ;

extern BOOL				g_netConnect;
extern BOOL				g_netSendPossibility;



////////////////////////////////////////////////////////////////////
// WinSock 초기화.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netStartUp(void);

////////////////////////////////////////////////////////////////////
// WinSock 정리
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netCleanUp(void);




////////////////////////////////////////////////////////////////////
// netConnet TCP/IP 접속.
//
// Parameters: (char *) IP 주소.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netConnect(char *szIP);

////////////////////////////////////////////////////////////////////
// WSAASyncSelect 등록.
//
// Parameters: (HWND)윈도우 핸들. 
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSetAsyncSelect(HWND hWnd);
	


////////////////////////////////////////////////////////////////////
// 윈도우 프로시저의 네트워크 처리 함수.
//
// Parameters: (WPARAM)wParam. (LPARAM)lParam.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netNetworkProc(WPARAM wParam, LPARAM lParam);
	


////////////////////////////////////////////////////////////////////
// 패킷 수신 이벤트 처리.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netRecvEvent(void);
	
////////////////////////////////////////////////////////////////////
// 패킷 송신 이벤트 처리.
//
// Parameters: 없음.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSendEvent(void);



////////////////////////////////////////////////////////////////////
// 패킷 보내기.
//
// Parameters: (CAyaPacket *)PacketClass.
// Return: (BOOL)TRUE, FALSE.
////////////////////////////////////////////////////////////////////
BOOL	netSendPacket(CAyaPacket *clpPacket);


//////////////////////////////////////////////////////////////////////////
// CompleteRecvPacket
//
// 패킷이 완료되었는지 확인후 완료 되었다면 패킷을 처리한다.
//
// Parameters: 없음.
// Return: (DWORD) 1:패킷처리 할것 없음. 0:패킷처리 남음. 0xff:오류.
//////////////////////////////////////////////////////////////////////////
DWORD	CompleteRecvPacket(void);


//////////////////////////////////////////////////////////////////////////
// 패킷 타입에 따른 처리 함수 호출.
//
// Parameters: (BYTE)PacketType. (CAyaPacket *)PacketClass.
// Return: (BOOL)TRUE, FALSE.
//////////////////////////////////////////////////////////////////////////
BOOL	PacketProc(BYTE byPacketType, CAyaPacket *clpPacket);




#endif